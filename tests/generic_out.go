// Code generated by http://github.com/zcolleen/minimock (dev). DO NOT EDIT.

package tests

//go:generate minimock -i github.com/zcolleen/minimock/v3/tests.genericOut -o generic_out.go -n GenericOutMock -p tests

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/zcolleen/minimock/v3"
)

// GenericOutMock implements genericOut
type GenericOutMock[T any] struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcName          func() (t1 T)
	inspectFuncName   func()
	afterNameCounter  uint64
	beforeNameCounter uint64
	NameMock          mGenericOutMockName[T]
}

// NewGenericOutMock returns a mock for genericOut
func NewGenericOutMock[T any](t minimock.Tester) *GenericOutMock[T] {
	m := &GenericOutMock[T]{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.NameMock = mGenericOutMockName[T]{mock: m}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mGenericOutMockName[T any] struct {
	mock               *GenericOutMock[T]
	defaultExpectation *GenericOutMockNameExpectation[T]
	expectations       []*GenericOutMockNameExpectation[T]
}

// GenericOutMockNameExpectation specifies expectation struct of the genericOut.Name
type GenericOutMockNameExpectation[T any] struct {
	mock *GenericOutMock[T]

	results *GenericOutMockNameResults[T]
	Counter uint64
}

// GenericOutMockNameResults contains results of the genericOut.Name
type GenericOutMockNameResults[T any] struct {
	t1 T
}

// Expect sets up expected params for genericOut.Name
func (mmName *mGenericOutMockName[T]) Expect() *mGenericOutMockName[T] {
	if mmName.mock.funcName != nil {
		mmName.mock.t.Fatalf("GenericOutMock.Name mock is already set by Set")
	}

	if mmName.defaultExpectation == nil {
		mmName.defaultExpectation = &GenericOutMockNameExpectation[T]{}
	}

	return mmName
}

// Inspect accepts an inspector function that has same arguments as the genericOut.Name
func (mmName *mGenericOutMockName[T]) Inspect(f func()) *mGenericOutMockName[T] {
	if mmName.mock.inspectFuncName != nil {
		mmName.mock.t.Fatalf("Inspect function is already set for GenericOutMock.Name")
	}

	mmName.mock.inspectFuncName = f

	return mmName
}

// Return sets up results that will be returned by genericOut.Name
func (mmName *mGenericOutMockName[T]) Return(t1 T) *GenericOutMock[T] {
	if mmName.mock.funcName != nil {
		mmName.mock.t.Fatalf("GenericOutMock.Name mock is already set by Set")
	}

	if mmName.defaultExpectation == nil {
		mmName.defaultExpectation = &GenericOutMockNameExpectation[T]{mock: mmName.mock}
	}
	mmName.defaultExpectation.results = &GenericOutMockNameResults[T]{t1}
	return mmName.mock
}

// Set uses given function f to mock the genericOut.Name method
func (mmName *mGenericOutMockName[T]) Set(f func() (t1 T)) *GenericOutMock[T] {
	if mmName.defaultExpectation != nil {
		mmName.mock.t.Fatalf("Default expectation is already set for the genericOut.Name method")
	}

	if len(mmName.expectations) > 0 {
		mmName.mock.t.Fatalf("Some expectations are already set for the genericOut.Name method")
	}

	mmName.mock.funcName = f
	return mmName.mock
}

// Name implements genericOut
func (mmName *GenericOutMock[T]) Name() (t1 T) {
	mm_atomic.AddUint64(&mmName.beforeNameCounter, 1)
	defer mm_atomic.AddUint64(&mmName.afterNameCounter, 1)

	if mmName.inspectFuncName != nil {
		mmName.inspectFuncName()
	}

	if mmName.NameMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmName.NameMock.defaultExpectation.Counter, 1)

		mm_results := mmName.NameMock.defaultExpectation.results
		if mm_results == nil {
			mmName.t.Fatal("No results are set for the GenericOutMock.Name")
		}
		return (*mm_results).t1
	}
	if mmName.funcName != nil {
		return mmName.funcName()
	}
	mmName.t.Fatalf("Unexpected call to GenericOutMock.Name.")
	return
}

// NameAfterCounter returns a count of finished GenericOutMock.Name invocations
func (mmName *GenericOutMock[T]) NameAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmName.afterNameCounter)
}

// NameBeforeCounter returns a count of GenericOutMock.Name invocations
func (mmName *GenericOutMock[T]) NameBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmName.beforeNameCounter)
}

// MinimockNameDone returns true if the count of the Name invocations corresponds
// the number of defined expectations
func (m *GenericOutMock[T]) MinimockNameDone() bool {
	for _, e := range m.NameMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.NameMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterNameCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcName != nil && mm_atomic.LoadUint64(&m.afterNameCounter) < 1 {
		return false
	}
	return true
}

// MinimockNameInspect logs each unmet expectation
func (m *GenericOutMock[T]) MinimockNameInspect() {
	for _, e := range m.NameMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to GenericOutMock.Name")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.NameMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterNameCounter) < 1 {
		m.t.Error("Expected call to GenericOutMock.Name")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcName != nil && mm_atomic.LoadUint64(&m.afterNameCounter) < 1 {
		m.t.Error("Expected call to GenericOutMock.Name")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *GenericOutMock[T]) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockNameInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *GenericOutMock[T]) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *GenericOutMock[T]) minimockDone() bool {
	done := true
	return done &&
		m.MinimockNameDone()
}
