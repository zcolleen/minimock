// Code generated by http://github.com/zcolleen/minimock (dev). DO NOT EDIT.

package tests

//go:generate minimock -i github.com/zcolleen/minimock/v3/tests.actor -o actor_mock.go -n ActorMock -p tests

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/zcolleen/minimock/v3"
)

// ActorMock implements actor
type ActorMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcAction          func(firstParam string, secondParam int) (i1 int, err error)
	inspectFuncAction   func(firstParam string, secondParam int)
	afterActionCounter  uint64
	beforeActionCounter uint64
	ActionMock          mActorMockAction
}

// NewActorMock returns a mock for actor
func NewActorMock(t minimock.Tester) *ActorMock {
	m := &ActorMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ActionMock = mActorMockAction{mock: m}
	m.ActionMock.callArgs = []*ActorMockActionParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mActorMockAction struct {
	mock               *ActorMock
	defaultExpectation *ActorMockActionExpectation
	expectations       []*ActorMockActionExpectation

	callArgs []*ActorMockActionParams
	mutex    sync.RWMutex
}

// ActorMockActionExpectation specifies expectation struct of the actor.Action
type ActorMockActionExpectation struct {
	mock      *ActorMock
	params    *ActorMockActionParams
	paramPtrs *ActorMockActionParamPtrs
	results   *ActorMockActionResults
	Counter   uint64
}

// ActorMockActionParams contains parameters of the actor.Action
type ActorMockActionParams struct {
	firstParam  string
	secondParam int
}

// ActorMockActionParamPtrs contains pointers to parameters of the actor.Action
type ActorMockActionParamPtrs struct {
	firstParam  *string
	secondParam *int
}

// ActorMockActionResults contains results of the actor.Action
type ActorMockActionResults struct {
	i1  int
	err error
}

// Expect sets up expected params for actor.Action
func (mmAction *mActorMockAction) Expect(firstParam string, secondParam int) *mActorMockAction {
	if mmAction.mock.funcAction != nil {
		mmAction.mock.t.Fatalf("ActorMock.Action mock is already set by Set")
	}

	if mmAction.defaultExpectation == nil {
		mmAction.defaultExpectation = &ActorMockActionExpectation{}
	}

	if mmAction.defaultExpectation.paramPtrs != nil {
		mmAction.mock.t.Fatalf("ActorMock.Action mock is already set by ExpectParams functions")
	}

	mmAction.defaultExpectation.params = &ActorMockActionParams{firstParam, secondParam}
	for _, e := range mmAction.expectations {
		if minimock.Equal(e.params, mmAction.defaultExpectation.params) {
			mmAction.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAction.defaultExpectation.params)
		}
	}

	return mmAction
}

// ExpectFirstParamParam1 sets up expected param firstParam for actor.Action
func (mmAction *mActorMockAction) ExpectFirstParamParam1(firstParam string) *mActorMockAction {
	if mmAction.mock.funcAction != nil {
		mmAction.mock.t.Fatalf("ActorMock.Action mock is already set by Set")
	}

	if mmAction.defaultExpectation == nil {
		mmAction.defaultExpectation = &ActorMockActionExpectation{}
	}

	if mmAction.defaultExpectation.params != nil {
		mmAction.mock.t.Fatalf("ActorMock.Action mock is already set by Expect")
	}

	if mmAction.defaultExpectation.paramPtrs == nil {
		mmAction.defaultExpectation.paramPtrs = &ActorMockActionParamPtrs{}
	}
	mmAction.defaultExpectation.paramPtrs.firstParam = &firstParam

	return mmAction
}

// ExpectSecondParamParam2 sets up expected param secondParam for actor.Action
func (mmAction *mActorMockAction) ExpectSecondParamParam2(secondParam int) *mActorMockAction {
	if mmAction.mock.funcAction != nil {
		mmAction.mock.t.Fatalf("ActorMock.Action mock is already set by Set")
	}

	if mmAction.defaultExpectation == nil {
		mmAction.defaultExpectation = &ActorMockActionExpectation{}
	}

	if mmAction.defaultExpectation.params != nil {
		mmAction.mock.t.Fatalf("ActorMock.Action mock is already set by Expect")
	}

	if mmAction.defaultExpectation.paramPtrs == nil {
		mmAction.defaultExpectation.paramPtrs = &ActorMockActionParamPtrs{}
	}
	mmAction.defaultExpectation.paramPtrs.secondParam = &secondParam

	return mmAction
}

// Inspect accepts an inspector function that has same arguments as the actor.Action
func (mmAction *mActorMockAction) Inspect(f func(firstParam string, secondParam int)) *mActorMockAction {
	if mmAction.mock.inspectFuncAction != nil {
		mmAction.mock.t.Fatalf("Inspect function is already set for ActorMock.Action")
	}

	mmAction.mock.inspectFuncAction = f

	return mmAction
}

// Return sets up results that will be returned by actor.Action
func (mmAction *mActorMockAction) Return(i1 int, err error) *ActorMock {
	if mmAction.mock.funcAction != nil {
		mmAction.mock.t.Fatalf("ActorMock.Action mock is already set by Set")
	}

	if mmAction.defaultExpectation == nil {
		mmAction.defaultExpectation = &ActorMockActionExpectation{mock: mmAction.mock}
	}
	mmAction.defaultExpectation.results = &ActorMockActionResults{i1, err}
	return mmAction.mock
}

// Set uses given function f to mock the actor.Action method
func (mmAction *mActorMockAction) Set(f func(firstParam string, secondParam int) (i1 int, err error)) *ActorMock {
	if mmAction.defaultExpectation != nil {
		mmAction.mock.t.Fatalf("Default expectation is already set for the actor.Action method")
	}

	if len(mmAction.expectations) > 0 {
		mmAction.mock.t.Fatalf("Some expectations are already set for the actor.Action method")
	}

	mmAction.mock.funcAction = f
	return mmAction.mock
}

// When sets expectation for the actor.Action which will trigger the result defined by the following
// Then helper
func (mmAction *mActorMockAction) When(firstParam string, secondParam int) *ActorMockActionExpectation {
	if mmAction.mock.funcAction != nil {
		mmAction.mock.t.Fatalf("ActorMock.Action mock is already set by Set")
	}

	expectation := &ActorMockActionExpectation{
		mock:   mmAction.mock,
		params: &ActorMockActionParams{firstParam, secondParam},
	}
	mmAction.expectations = append(mmAction.expectations, expectation)
	return expectation
}

// Then sets up actor.Action return parameters for the expectation previously defined by the When method
func (e *ActorMockActionExpectation) Then(i1 int, err error) *ActorMock {
	e.results = &ActorMockActionResults{i1, err}
	return e.mock
}

// Action implements actor
func (mmAction *ActorMock) Action(firstParam string, secondParam int) (i1 int, err error) {
	mm_atomic.AddUint64(&mmAction.beforeActionCounter, 1)
	defer mm_atomic.AddUint64(&mmAction.afterActionCounter, 1)

	if mmAction.inspectFuncAction != nil {
		mmAction.inspectFuncAction(firstParam, secondParam)
	}

	mm_params := ActorMockActionParams{firstParam, secondParam}

	// Record call args
	mmAction.ActionMock.mutex.Lock()
	mmAction.ActionMock.callArgs = append(mmAction.ActionMock.callArgs, &mm_params)
	mmAction.ActionMock.mutex.Unlock()

	for _, e := range mmAction.ActionMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmAction.ActionMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAction.ActionMock.defaultExpectation.Counter, 1)
		mm_want := mmAction.ActionMock.defaultExpectation.params
		mm_want_ptrs := mmAction.ActionMock.defaultExpectation.paramPtrs

		mm_got := ActorMockActionParams{firstParam, secondParam}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.firstParam != nil && !minimock.Equal(*mm_want_ptrs.firstParam, mm_got.firstParam) {
				mmAction.t.Errorf("ActorMock.Action got unexpected parameter firstParam, want: %#v, got: %#v%s\n", *mm_want_ptrs.firstParam, mm_got.firstParam, minimock.Diff(*mm_want_ptrs.firstParam, mm_got.firstParam))
			}

			if mm_want_ptrs.secondParam != nil && !minimock.Equal(*mm_want_ptrs.secondParam, mm_got.secondParam) {
				mmAction.t.Errorf("ActorMock.Action got unexpected parameter secondParam, want: %#v, got: %#v%s\n", *mm_want_ptrs.secondParam, mm_got.secondParam, minimock.Diff(*mm_want_ptrs.secondParam, mm_got.secondParam))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmAction.t.Errorf("ActorMock.Action got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmAction.ActionMock.defaultExpectation.results
		if mm_results == nil {
			mmAction.t.Fatal("No results are set for the ActorMock.Action")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmAction.funcAction != nil {
		return mmAction.funcAction(firstParam, secondParam)
	}
	mmAction.t.Fatalf("Unexpected call to ActorMock.Action. %v %v", firstParam, secondParam)
	return
}

// ActionAfterCounter returns a count of finished ActorMock.Action invocations
func (mmAction *ActorMock) ActionAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAction.afterActionCounter)
}

// ActionBeforeCounter returns a count of ActorMock.Action invocations
func (mmAction *ActorMock) ActionBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAction.beforeActionCounter)
}

// Calls returns a list of arguments used in each call to ActorMock.Action.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAction *mActorMockAction) Calls() []*ActorMockActionParams {
	mmAction.mutex.RLock()

	argCopy := make([]*ActorMockActionParams, len(mmAction.callArgs))
	copy(argCopy, mmAction.callArgs)

	mmAction.mutex.RUnlock()

	return argCopy
}

// MinimockActionDone returns true if the count of the Action invocations corresponds
// the number of defined expectations
func (m *ActorMock) MinimockActionDone() bool {
	for _, e := range m.ActionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ActionMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterActionCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAction != nil && mm_atomic.LoadUint64(&m.afterActionCounter) < 1 {
		return false
	}
	return true
}

// MinimockActionInspect logs each unmet expectation
func (m *ActorMock) MinimockActionInspect() {
	for _, e := range m.ActionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ActorMock.Action with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ActionMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterActionCounter) < 1 {
		if m.ActionMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ActorMock.Action")
		} else {
			m.t.Errorf("Expected call to ActorMock.Action with params: %#v", *m.ActionMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAction != nil && mm_atomic.LoadUint64(&m.afterActionCounter) < 1 {
		m.t.Error("Expected call to ActorMock.Action")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ActorMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockActionInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ActorMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ActorMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockActionDone()
}
